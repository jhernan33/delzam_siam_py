from django.shortcuts import renderfrom django.http import HttpResponsefrom django.http.response import JsonResponsefrom django.shortcuts import get_object_or_404from rest_framework import statusfrom rest_framework import filters as dffrom rest_framework import generics, statusfrom rest_framework.response import Responsefrom rest_framework.parsers import JSONParser from rest_framework.permissions import IsAuthenticatedfrom asiam.models import Tesodfrom asiam.serializers import TesodSerializerfrom asiam.paginations import SmallResultsSetPaginationclass TesodListView(generics.ListAPIView):    serializer_class = TesodSerializer    permission_classes = []    queryset = Tesod.objects.all()    pagination_class = SmallResultsSetPagination    filter_backends = (df.SearchFilter, )    search_fields = ('id', )    ordering_fields = ('id', )class TesodCreateView(generics.CreateAPIView):    #permission_classes = [IsAuthenticated, ]    permission_classes = []    serializer_class = TesodSerializer    def create(self, request, *args, **kwargs):        serializer = self.get_serializer(data=request.data)        serializer.is_valid(raise_exception=True)        self.perform_create(serializer)        headers = self.get_success_headers(serializer.data)        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)class TesodRetrieveView(generics.RetrieveAPIView):    serializer_class = TesodSerializer    permission_classes = []    queryset = Tesod.objects.all()    lookup_field = 'id'class TesodUpdateView(generics.UpdateAPIView):    serializer_class = TesodSerializer    permission_classes = []    queryset = Tesod.objects.all()    lookup_field = 'id'    class TesodDestroyView(generics.DestroyAPIView):    permission_classes = []    serializer_class = TesodSerializer    queryset = Tesod.objects.all()    lookup_field = 'id'